Nim and OO, Part IV
作者：Goran Krampe
Roads less Taken
A blend of programming, boats and life.
时间:NOV 30TH, 2014/2014,11,30

As I described in the earlier posts Nim didn’t support “super calls” when using methods instead of statically bound procs and generics. My article caused a little bit of discussion around this on IRC and Andreas decided to implement the mechanism he already had planned - but had not fully decided a good name for.

正如在早期的帖子中我所描述的，当使用方法而不是静态绑定过程和泛型时Nim不支持"super call"(超类构造方法调用)。在IRC上我的文章引起了一些关于这个观点的讨论并且Andreas决定实现他早已经计划的机制-但是还没有完全确定一个好名字。

The other day this mechanism entered the devel branch which means it will be official in the next release of Nim, which I suspect will be out before the end of 2014. It should be noted that devel is mainly undergoing bug fixing, so unless you are paranoid(偏执狂) it’s pretty usable. Now… of course I had to try out super calls in my sample code…

前几日这个机制进入发展分支，这意味着它将在Nim的下一个版本中成为官方的，在2014年底前我所猜想的将会实现。应当指出的是devel主要经历bug修复，所以除非你是偏执狂否则它非常有用。现在...当然我必须在我的示例代码中尝试超级构造方法调用。。。

Instead of calling it static_call - implying that the call resolution is made at compile time statically, the name ended up as procCall - implying the call resolution is simply done just like its done for procs. Same, same - different words. To put it another way, c we are calling a method, let the static types of the arguments decide which method to call, not the actual runtime types.

与其称之为static_call-意味着调用解析是在编译时静态确定，名字最终成为procCall-意味着调用解析简单完成就好像对过程所做的那样-不同的词。换句话说，即使我们调用一个方法，让静态类型的参数决定调用哪一个方法，不是实际的运行时类型。

A bit of repetition from the earlier articles - today you can select among overloaded procs to call by using type conversion, so if you want to call myProc that takes an argument of type A when you have an object of type B in your hand (B being a sub type of A), you just do myProc(A(b)).

早期的文章有点重复-今天你可以选择在重载的过程中通过使用类型转换调用，所以如果当你有一个B类型的对象而你想调用有一个A参数类型的myProc时(B是A的一个子类型)，你可以使用myProc(A(b))。

This is called a type conversion and can be viewed as a type safe cast, it only works if its safe to do it. Nim also has cast but generally its something you should only use if you know what the heck you are doing. :)

这叫做一个类型转换并且可以被看做一种安全类型塑造，如果它是安全的它才会工作。Nim也有铸型但通常如果你知道你正在做什么你才能使用。:)

Now… methods don’t rely on static typing - they resolve based on the actual runtime type of the objects - that’s their whole reason for existing and this is essential in supporting more complex OO code. So the type conversion technique in itself only works for selecting among overloaded procs, not methods.

现在...方法不依赖于静态类型-它们的解决基于对象的实际运行时类型-这是它们存在的全部原因并且为了支持更复杂的面向对象代码这是必不可少的。所以在本身的类型转换技术只适用于在重载的过程中选择，而不是方法。

But now, with the addition of procCall we can call overloaded methods using the exact same technique. Our Fruit code from earlier articles can now be simplified - we no longer need to factor out the base implementation of calcPrice as a method under a different name basePrice. And it still works as intended, here is the updated code:

但是现在，随着添加procCall我们可以调用重载的方法使用完全相同的技术。我们的Fruit代码从早期的文章现在可以简化-我们不再需要用一个不同的名字basePrice提取calcPrice的基础实现作为一个方法。并且它依然能预期的工作，这是最新的代码：

import math

# Dollars and Kgs
type
  Dollar* = distinct float
  Kg* = distinct float

proc `$`*(x: Dollar) :string =
  $x.float

proc `==`*(x, y: Dollar) :bool {.borrow.}


# Fruit class
type
  Fruit* = ref object of RootObj
    origin*: string
    price*: Dollar

method `$`*(self: Fruit): string =
  self.origin & " " & $self.price

method reduction(self: Fruit) :Dollar =
  Dollar(0)


method calcPrice*(self: Fruit): Dollar =
  Dollar(round(self.price.float * 100)/100 - self.reduction().float)


# Banana class
type
  Banana* = ref object of Fruit
    size*: int

method reduction(self: Banana): Dollar =
  Dollar(9)

method calcPrice*(self: Banana): Dollar =
  procCall Fruit(self).calcPrice()

# Pumpkin
type
  Pumpkin* = ref object of Fruit
    weight*: Kg

method reduction(self: Pumpkin): Dollar =
  Dollar(1)

method calcPrice*(self: Pumpkin) :Dollar =
  Dollar(procCall(Fruit(self).calcPrice()).float * self.weight.float)


# BigPumpkin
type
  BigPumpkin* = ref object of Pumpkin

method calcPrice*(self: BigPumpkin) :Dollar =
  Dollar(1000)


# Construction procs
proc newPumpkin*(weight, origin, price): Pumpkin = Pumpkin(weight: weight, origin: origin, price: price)
proc newBanana*(size, origin, price): Banana = Banana(size: size, origin: origin, price: price)
proc newBigPumpkin*(weight, origin, price): BigPumpkin = BigPumpkin(weight: weight, origin: origin, price: price)

As we can see the “syntactic style” can vary as usual, in line 40 we can use procCall without parenthesis, but on line 51 we need to use it in a “calling style” in order for precedence to work out.

正如我们所见"句法风格"可以与往常大不一样，在第40行我们可以不带括号使用procCall，但是在第51行我们需要在一个"调用风格"中使用它为了工作优先级。

So… one may wonder, why not just have something like super as in Smalltalk or Java etc? The reason is quite simple, Nim supports multiple dispatch - in other words in Nim we can dispatch based on the types of several of the arguments, as long as they are objects. There is no specific argument in the method call that is privileged as “self”, we just tend to use the first argument by convention as “the receiver”. This also means that “super” has no reasonable meaning in Nim, super of who?

所以...你可能疑问，为什么没有正如在Smalltalk和Jave等中的一些东西如super?这个原因是相当简单的，Nim支持多调度-换句话说在Nim中我们可以基于几种参数的类型调度，只要它们是对象。方法调度中没有特定的参数，它们享有"self"特权，以公约作为接收器我们仅倾向于使用第一个参数。这也意味着"super"在Nim中没有合理的意义，super是谁?

The type conversions you would use together with procCall does spell out the “super type” explicitly (in our example above - “Fruit”), thus making it very clear which method you want to call. A puritan would possibly claim that it “couples” the class with its superclass too much (compared to the more abstract uncoupled “super”). But I think this explicit style fits the Nim mindset better - and even if this makes changing superclasses a bit more tedious(单调沉闷的； 冗长乏味的； 令人生厌的；)(you need to hunt down procCalls and fix the type conversions) - its nothing that some future refactoring tools couldn’t easily fix, and changing superclasses isn’t what you do every minute anyway.

类型转换应该与procCall一起使用并明确的阐明"超级类型"(在我们上面的例子中-"Fruit")，因此是它非常清楚你想调用哪个方法。一个清教徒可能会宣称它的双亲类有太多它的父类(相比更加抽象的非耦合的"super")。但是我认为这显示的类型更好的适合Nim的观念模式-并且即使这使改变父类有一点乏味(你需要搜索直到找到procCalls并且固定类型转换)-一些未来重构的工具不能轻易的解决并无大碍，并且无论如何改变父类不是你每分钟都要做的事。

One could also argue that the intention of the programmer is slightly lost with this style. It doesn’t obviously read as “call the super implementation”, and I suspect we may find coders using this also throwing in a small comment stating that hey, this is a super call.

你也可以说程序员的意图有点失去了这个意图。它没有明显的误读为"调用超级实现",并且我猜想我们会发现编码器使用这也抛出一个小评论说明，hey，这是一个超级调用。

The mechanism also enables “super super” since you can explicitly skip over intermediate(中间的，中级的) classes which of course is generally bad style, but at the same time, explicitness follows the principle of least surprise :)

该机制也能够"超级超级"因此你可以显示的跳过中间类，当然它一般不是好风格，但是同时，至少显示的遵循以下原则：)

Calling overloads on self

Another scenario(方案) we easily could have is a class with several overloads of a method foo in which one or many of them wants to call the “primary” implementation of the behavior. This is in fact technically the same scenario as the “super call”, and would be solved the same way - its just an example of multiple dispatch where we are dispatching on more than the first argument. Let’s say we have a Foo class which holds a seq of fruit names, for some … odd reason. And we want to be able to add fruit names to it by sending in various different objects, well, a Fruit obviously, but also collection of Fruits etc.

我们可以很容易有另一种方案，一个foo类有多个重载了一个方法，在foo类中它们中的一个或多个想要调用"主要"执行的行为。实际上技术上这是与"超级调用"相同的方案，并且将相同的方式解决-它仅是多调度的一个例子，在例子中我们调度超过第一个参数。比方说我们有一个Foo类，具有一系列水果名称，我们想能够给它添加水果名称通过发送各种不同的对象，Fruits是明显的一个，但是也收集Fruits等。

import fruitmethod

# Foo class
type
  Foo* = ref object of RootObj
    fruits*: seq[string]

# The core method we want to call
method add(self: Foo, fruit: Fruit) =
  echo "   ...and here we actually add it"
  self.fruits.add($fruit)

method add(self: Foo, banana: Banana) =
  echo "Adding a Banana"
  procCall self.add(Fruit(banana))

method add(self: Foo, pumpkin: Pumpkin) =
  echo "Adding a Pumpkin"
  procCall self.add(Fruit(pumpkin))

method add(self: Foo, fruits: seq[Fruit]) =
  echo "Adding a bunch of Fruit"
  for f in fruits:
    self.add(f)

# This is a constructor proc that is normally used to initialize objects
proc newFoo(): Foo =
  result = Foo(fruits: newSeq[string]())

when isMainModule:
  # Get us a Foo
  var foo = newFoo()

  # Add a single Banana
  foo.add(newBanana(size = 0, origin = "Liberia", price = 20.Dollar))

  # Create a seq of Fruit
  var s = newSeq[Fruit]()
  var b = newBanana(size = 0, origin = "Liberia", price = 20.00222.Dollar)
  var p = newPumpkin(weight = 5.2.Kg, origin = "Africa", price = 10.00111.Dollar)
  s.add(b)
  s.add(p)

  # Add them all, this will first call the method for a seq of Fruit,
  # and that method will in turn call the one for Banana and the one for Pumpkin
  # and those in turn will use procCall to call the primary method for Fruit.
  foo.add(s)

As we can see above we need to use procCall on line 15 and 19 in order to be able to call the add method that takes a Fruit from the other add methods. So yes, this is not only useful for doing classic super calls.

正如我们上面所看到的我们需要在第15行和第19行使用procCall为了能够调用add方法，它从其他的add方法取得一个Fruit。所以，这不仅对使用经典的超级调用是有用的。

Conclusion

The mechanism procCall solves the super call problem with methods, and it also solves similar use cases along the way. As far as I can tell this removes the last “hurdle” for being able to do serious OO coding in Nim.

procCall机制用方法解决了超级调用问题，并且它也解决了这种情况下的类似的使用情况。据我所能说的，这为能够在Nim中做严谨的面向对象清除了最后的障碍。



















